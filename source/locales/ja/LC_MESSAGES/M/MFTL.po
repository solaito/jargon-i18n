# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, Original Maintainer: Eric S. Raymond, Converted by
# @solaito
# This file is distributed under the same license as the jargon-sphinx
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: jargon-sphinx \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-02 15:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../M/MFTL.rst:5
msgid "MFTL"
msgstr ""

#: ../../M/MFTL.rst:7
msgid "/M·F·T·L/"
msgstr ""

#: ../../M/MFTL.rst:9
msgid "[abbreviation: ‘My Favorite Toy Language’]"
msgstr ""

#: ../../M/MFTL.rst:11
msgid ""
"adj. Describes a talk on a programming language design that is heavy on "
"the syntax (with lots of BNF), sometimes even talks about semantics "
"(e.g., type systems), but rarely, if ever, has any content (see :ref"
":`content-free`\\). More broadly applied to talks — even when the topic "
"is not a programming language — in which the subject matter is gone into "
"in unnecessary and meticulous detail at the sacrifice of any conceptual "
"content. \"Well, it was a typical MFTL talk\"."
msgstr ""

#: ../../M/MFTL.rst:16
msgid ""
"n\\. Describes a language about which the developers are passionate "
"(often to the point of proselytic zeal) but no one else cares about. "
"Applied to the language by those outside the originating group. \"He "
"cornered me about type resolution in his MFTL.\""
msgstr ""

#: ../../M/MFTL.rst:21
msgid ""
"The first great goal in the mind of the designer of an MFTL is usually to"
" write a compiler for it, then bootstrap the design away from "
"contamination by lesser languages by writing a compiler for it in itself."
" Thus, the standard put-down question at an MFTL talk is \"Has it been "
"used for anything besides its own compiler?\" On the other hand, a "
"(compiled) language that cannot even be used to write its own compiler is"
" beneath contempt. (The qualification has become necessary because of the"
" increasing popularity of interpreted languages like :ref:`Perl` and "
":ref:`Python`\\.) See :ref:`break-even-point`\\. (On a related note, Doug"
" McIlroy once proposed a test of the generality and utility of a language"
" and the operating system under which it is compiled: \"Is the output of "
"a FORTRAN program acceptable as input to the FORTRAN compiler?\" In other"
" words, can you write programs that write programs? (See "
":ref:`toolsmith`\\.) Alarming numbers of (language, OS) pairs fail this "
"test, particularly when the language is FORTRAN; aficionados are quick to"
" point out that :ref:`Unix` (even using FORTRAN) passes it handily. That "
"the test could ever be failed is only surprising to those who have had "
"the good fortune to have worked only under modern systems which lack OS-"
"supported and -imposed \"file types\".)"
msgstr ""

