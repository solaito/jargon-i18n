# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, Original Maintainer: Eric S. Raymond, Converted by
# @solaito
# This file is distributed under the same license as the jargon-sphinx
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: jargon-sphinx \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-02 15:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../P/patch.rst:5
msgid "patch"
msgstr ""

#: ../../P/patch.rst:7
msgid ""
"n\\. A temporary addition to a piece of code, usually as a :ref:`quick-"
"and-dirty` remedy to an existing bug or misfeature. A patch may or may "
"not work, and may or may not eventually be incorporated permanently into "
"the program. Distinguished from a :ref:`diff` or :ref:`mod` by the fact "
"that a patch is generated by more primitive means than the rest of the "
"program; the classical examples are instructions modified by using the "
"front panel switches, and changes made directly to the binary executable "
"of a program originally written in an :ref:`HLL`\\. Compare :ref:`one-"
"line-fix`\\."
msgstr ""

#: ../../P/patch.rst:13
msgid "vt\\. To insert a patch into a piece of code."
msgstr ""

#: ../../P/patch.rst:17
msgid "[in the Unix world] n. A :ref:`diff` (sense 2)."
msgstr ""

#: ../../P/patch.rst:20
msgid ""
"A set of modifications to binaries to be applied by a patching program. "
"IBM operating systems often receive updates to the operating system in "
"the form of absolute hexadecimal patches. If you have modified your OS, "
"you have to disassemble these back to the source. The patches might later"
" be corrected by other patches on top of them (patches were said to "
"\"grow scar tissue\"). The result was often a convoluted :ref:`patch-"
"space` and headaches galore."
msgstr ""

#: ../../P/patch.rst:27
msgid ""
"[Unix] the :manpage:`patch(1)` program, written by Larry Wall, which "
"automatically applies a patch (sense 3) to a set of source code."
msgstr ""

#: ../../P/patch.rst:29
msgid ""
"There is a classic story of a :ref:`tiger-team` penetrating a secure "
"military computer that illustrates the danger inherent in binary patches "
"(or, indeed, any patches that you can't — or don't — inspect and examine "
"before installing). They couldn't find any :ref:`trap-door`\\s or any way"
" to penetrate security of IBM's OS, so they made a site visit to an IBM "
"office (remember, these were official military types who were purportedly"
" on official business), swiped some IBM stationery, and created a fake "
"patch. The patch was actually the trapdoor they needed. The patch was "
"distributed at about the right time for an IBM patch, had official "
"stationery and all accompanying documentation, and was dutifully "
"installed. The installation manager very shortly thereafter learned "
"something about proper procedures."
msgstr ""

