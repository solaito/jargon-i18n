# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, Original Maintainer: Eric S. Raymond, Converted by
# @solaito
# This file is distributed under the same license as the jargon-sphinx
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: jargon-sphinx \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-02 15:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../B/bit-bucket.rst:5
msgid "bit bucket"
msgstr ""

#: ../../B/bit-bucket.rst:7
msgid "n\\."
msgstr ""

#: ../../B/bit-bucket.rst:9
msgid "[very common]"
msgstr ""

#: ../../B/bit-bucket.rst:12
msgid ""
"The universal data sink (originally, the mythical receptacle used to "
"catch bits when they fall off the end of a register during a shift "
"instruction). Discarded, lost, or destroyed data is said to have gone to "
"the bit bucket. On :ref:`Unix`\\, often used for :ref:`dev-null`\\. "
"Sometimes amplified as the Great Bit Bucket in the Sky."
msgstr ""

#: ../../B/bit-bucket.rst:18
msgid ""
"The place where all lost mail and news messages eventually go. The "
"selection is performed according to :ref:`Finagles-Law`\\; important mail"
" is much more likely to end up in the bit bucket than junk mail, which "
"has an almost 100% probability of getting delivered. Routing to the bit "
"bucket is automatically performed by mail-transfer agents, news systems, "
"and the lower layers of the network."
msgstr ""

#: ../../B/bit-bucket.rst:23
msgid ""
"The ideal location for all unwanted mail responses: \"Flames about this "
"article to the bit bucket.\" Such a request is guaranteed to overflow "
"one's mailbox with flames."
msgstr ""

#: ../../B/bit-bucket.rst:27
msgid ""
"Excuse for all mail that has not been sent. \"I mailed you those figures "
"last week; they must have landed in the bit bucket.\" Compare :ref"
":`black-hole`\\."
msgstr ""

#: ../../B/bit-bucket.rst:31
msgid ""
"This term is used purely in jest. It is based on the fanciful notion that"
" bits are objects that are not destroyed but only misplaced. This appears"
" to have been a mutation of an earlier term ‘bit box’, about which the "
"same legend was current; old-time hackers also report that trainees used "
"to be told that when the CPU stored bits into memory it was actually "
"pulling them \"out of the bit box\". See also :ref:`chad-box`\\."
msgstr ""

#: ../../B/bit-bucket.rst:36
msgid ""
"Another variant of this legend has it that, as a consequence of the "
"\"parity preservation law\", the number of 1 bits that go to the bit "
"bucket must equal the number of 0 bits. Any imbalance results in bits "
"filling up the bit bucket. A qualified computer technician can empty a "
"full bit bucket as part of scheduled maintenance."
msgstr ""

#: ../../B/bit-bucket.rst:40
msgid ""
"The source for all these meanings, is, historically, the fact that the "
":ref:`chad-box` on a paper-tape punch was sometimes called a bit bucket."
msgstr ""

#: ../../B/bit-bucket.rst:46
msgid "A literal  :ref:`bit-bucket`\\."
msgstr ""

#: ../../B/bit-bucket.rst:48
msgid ""
"(The next cartoon in the Crunchly saga is        "
":ref:`76-02-14<crunchly76-02-14>`\\.   The previous one is         "
":ref:`75-10-04<crunchly75-10-04>`\\.)"
msgstr ""

