# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, Original Maintainer: Eric S. Raymond, Converted by
# @solaito
# This file is distributed under the same license as the jargon-sphinx
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: jargon-sphinx \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-02 15:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../B/bottom-up-implementation.rst:5
msgid "bottom-up implementation"
msgstr ""

#: ../../B/bottom-up-implementation.rst:7
msgid "n\\."
msgstr ""

#: ../../B/bottom-up-implementation.rst:9
msgid ""
"Hackish opposite of the techspeak term top-down design. It has been "
"received wisdom in most programming cultures that it is best to design "
"from higher levels of abstraction down to lower, specifying sequences of "
"action in increasing detail until you get to actual code. Hackers often "
"find (especially in exploratory designs that cannot be closely specified "
"in advance) that it works best to *build* things in the opposite order, "
"by writing and testing a clean set of primitive operations and then "
"knitting them together. Naively applied, this leads to hacked-together "
"bottom-up implementations; a more sophisticated response is middle-out "
"implementation, in which scratch code within primitives at the mid-level "
"of the system is gradually replaced with a more polished version of the "
"lowest level at the same time the structure above the midlevel is being "
"built."
msgstr ""

