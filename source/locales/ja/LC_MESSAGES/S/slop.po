# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, Original Maintainer: Eric S. Raymond, Converted by
# @solaito
# This file is distributed under the same license as the jargon-sphinx
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: jargon-sphinx \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-02 15:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../S/slop.rst:5
msgid "slop"
msgstr ""

#: ../../S/slop.rst:7
msgid "n\\."
msgstr ""

#: ../../S/slop.rst:10
msgid ""
"A one-sided :ref:`fudge-factor`\\, that is, an allowance for error but in"
" only one of two directions. For example, if you need a piece of wire 10 "
"feet long and have to guess when you cut it, you make very sure to cut it"
" too long, by a large amount if necessary, rather than too short by even "
"a little bit, because you can always cut off the slop but you can't paste"
" it back on again. When discrete quantities are involved, slop is often "
"introduced to avoid the possibility of being on the losing side of a :ref"
":`fencepost-error`\\."
msgstr ""

#: ../../S/slop.rst:15
#, python-format
msgid ""
"The percentage of ‘extra’ code generated by a compiler over the size of "
"equivalent assembler code produced by :ref:`hand-hacking`\\; i.e., the "
"space (or maybe time) you lose because you didn't do it yourself. This "
"number is often used as a measure of the goodness of a compiler; slop "
"below 5% is very good, and 10% is usually acceptable. With modern "
"compiler technology, esp. on RISC machines, the compiler's slop may "
"actually be *negative*\\; that is, humans may be unable to generate code "
"as good. This is one of the reasons assembler programming is no longer "
"common."
msgstr ""

